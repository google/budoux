//go:generate go run .
//go:generate go fmt ../models/
package main

import (
	"encoding/json"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

var modelTemplate = template.Must(template.New("model").Parse(`
// Code generated by gen/generate_models.go. DO NOT EDIT.
// Generate from {{.Src}}
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

var {{.Name}} = Model{ {{range $k, $g := .Data}}
"{{$k}}": { {{range $w, $s := $g}}"{{$w}}": {{$s}},{{end}} },{{end}}
}
`))

func main() {
	// generate japanese model.
	if err := saveModelByName("ja"); err != nil {
		panic(err)
	}
	// generate thai model.
	if err := saveModelByName("th"); err != nil {
		panic(err)
	}
	// generate simplified chinese model.
	if err := saveModelByName("zh-hans"); err != nil {
		panic(err)
	}
	// generate traditional chinese model.
	if err := saveModelByName("zh-hant"); err != nil {
		panic(err)
	}
}

func saveModelByName(name string) error {
	d, err := loadDataByName(name)
	if err != nil {
		return err
	}
	tmp := make(map[string]map[string]int)
	if err := json.Unmarshal(d, &tmp); err != nil {
		return err
	}
	data := make(map[string]map[string]int)
	for key, group := range tmp {
		data[key] = make(map[string]int)
		for word, score := range group {
			// escape double quotes
			// thai model includes double quotes.
			word = strings.ReplaceAll(word, "\"", "\\\"")
			data[key][word] = score
		}
	}
	params := struct {
		Src  string
		Name string
		Data map[string]map[string]int
	}{
		Src:  fmt.Sprintf("%s.json", name),
		Name: strings.ReplaceAll(name, "-", ""),
		Data: data,
	}
	dst, err := getModelPathByName(name)
	if err != nil {
		return err
	}
	f, err := os.Create(dst)
	if err != nil {
		return err
	}
	defer f.Close()
	if err := modelTemplate.Execute(f, params); err != nil {
		return err
	}
	return nil
}

func loadDataByName(name string) ([]byte, error) {
	fp, err := getDataPathByName(name)
	if err != nil {
		return nil, err
	}
	f, err := os.Open(fp)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	b, err := io.ReadAll(f)
	if err != nil {
		return nil, err
	}
	return b, nil
}

func getDataPathByName(name string) (string, error) {
	fp, err := filepath.Abs(filepath.Join("..", "..", "budoux", "models", fmt.Sprintf("%s.json", name)))
	if err != nil {
		return "", err
	}
	return fp, nil
}

func getModelPathByName(name string) (string, error) {
	fp, err := filepath.Abs(filepath.Join("..", "models", fmt.Sprintf("%s.go", name)))
	if err != nil {
		return "", err
	}
	return fp, nil
}
